{
  "$schema": "https://json-schema.org/draft/2020-12/schema",

  "type": "object",
  "properties": {
    "version": {
      "description": "The version number of the URPC schema specification used.",
      "const": 1
    },
    "nodes": {
      "description": "An ordered array of all declared elements (nodes) in the URPC schema.",
      "type": "array",
      "items": {
        "oneOf": [
          { "$ref": "#/$defs/docNode" },
          { "$ref": "#/$defs/ruleNode" },
          { "$ref": "#/$defs/typeNode" },
          { "$ref": "#/$defs/procNode" }
        ]
      }
    }
  },
  "required": ["version", "nodes"],
  "additionalProperties": false,

  "$defs": {
    "docNode": {
      "title": "Documentation Node",
      "description": "Represents a standalone documentation block.",
      "type": "object",
      "properties": {
        "kind": {
          "description": "Node type identifier.",
          "const": "doc"
        },
        "content": {
          "description": "The documentation content (Markdown or resolved external file).",
          "type": "string"
        }
      },
      "required": ["kind", "content"],
      "additionalProperties": false
    },

    "ruleNode": {
      "title": "Rule Definition Node",
      "description": "Defines a custom validation rule.",
      "type": "object",
      "properties": {
        "kind": {
          "description": "Node type identifier.",
          "const": "rule"
        },
        "name": {
          "description": "Name of the custom rule.",
          "type": "string",
          "pattern": "^[a-z][a-zA-Z0-9]*$"
        },
        "doc": {
          "description": "Associated documentation string (optional).",
          "type": ["string", "null"]
        },
        "for": {
          "description": "The primitive or custom type name this rule applies to.",
          "oneOf": [
            { "$ref": "#/$defs/PrimitiveTypeEnum" },
            {
              "type": "string",
              "description": "Custom type name",
              "pattern": "^[A-Z][a-zA-Z0-9]*$"
            }
          ]
        },
        "paramDef": {
          "description": "Definition of the parameter this rule expects (null if none).",
          "oneOf": [
            { "type": "null" },
            { "$ref": "#/$defs/paramDefinition" }
          ]
        },
        "error": {
          "description": "Default error message for the rule (optional).",
          "type": ["string", "null"]
        }
      },
      "required": ["kind", "name", "for"],
      "additionalProperties": false
    },

    "paramDefinition": {
      "title": "Parameter Definition",
      "description": "Describes the type and structure expected for a rule's parameter.",
      "type": "object",
      "properties": {
        "type": {
          "description": "The primitive type expected for the parameter (excluding datetime).",
          "$ref": "#/$defs/paramPrimitiveTypeEnum"
        },
        "isArray": {
          "description": "Indicates if the parameter is expected to be an array of the specified type.",
          "type": "boolean"
        }
      },
      "required": ["type", "isArray"],
      "additionalProperties": false
    },

    "typeNode": {
      "title": "Type Definition Node",
      "description": "Defines a custom data type.",
      "type": "object",
      "properties": {
        "kind": {
          "description": "Node type identifier.",
          "const": "type"
        },
        "name": {
          "description": "Name of the custom type.",
          "type": "string",
          "pattern": "^[A-Z][a-zA-Z0-9]*$"
        },
        "doc": {
          "description": "Associated documentation string (optional).",
          "type": ["string", "null"]
        },
        "fields": {
          "description": "Ordered list of fields within the type.",
          "type": "array",
          "items": { "$ref": "#/$defs/fieldDefinition" }
        }
      },
      "required": ["kind", "name"],
      "additionalProperties": false
    },

    "procNode": {
      "title": "Procedure Definition Node",
      "description": "Defines an RPC procedure.",
      "type": "object",
      "properties": {
        "kind": {
          "description": "Node type identifier.",
          "const": "proc"
        },
        "name": {
          "description": "Name of the procedure.",
          "type": "string",
          "pattern": "^[A-Z][a-zA-Z0-9]*$"
        },
        "doc": {
          "description": "Associated documentation string (optional).",
          "type": ["string", "null"]
        },
        "input": {
          "description": "Ordered list of input fields for the procedure.",
          "type": "array",
          "items": { "$ref": "#/$defs/fieldDefinition" }
        },
        "output": {
          "description": "Ordered list of output fields for the procedure.",
          "type": "array",
          "items": { "$ref": "#/$defs/fieldDefinition" }
        },
        "meta": {
          "description": "Optional key-value metadata associated with the procedure (null if none).",
          "type": "array",
          "items": {
            "title": "Meta Definition",
            "description": "Defines a meta within a procedure.",
            "type": "object",
            "properties": {
              "key": {
                "description": "Key of the meta.",
                "type": "string",
                "pattern": "^[a-zA-Z0-9]*$"
              },
              "value": {
                "description": "Value of the meta.",
                "type": ["string", "integer", "number", "boolean"]
              }
            },
            "required": ["key", "value"],
            "additionalProperties": false
          }
        }
      },
      "required": ["kind", "name"],
      "additionalProperties": false
    },

    "PrimitiveTypeEnum": {
      "description": "Enumeration of allowed primitive type names.",
      "type": "string",
      "enum": ["string", "int", "float", "boolean", "datetime"]
    },

    "paramPrimitiveTypeEnum": {
      "description": "Enumeration of allowed primitive type names for rule parameters.",
      "type": "string",
      "enum": ["string", "int", "float", "boolean"]
    },

    "fieldDefinition": {
      "title": "Field Definition",
      "description": "Defines a field within a type or procedure input/output.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the field.",
          "type": "string",
          "pattern": "^[a-zA-Z0-9]*$"
        },
        "typeName": {
          "description": "Name of the primitive or custom type (used if the type is not inline).",
          "type": ["string", "null"]
        },
        "typeInline": {
          "description": "Definition of the inline object type (used if the type is not named).",
          "oneOf": [
            { "$ref": "#/$defs/inlineTypeDefinition" },
            { "type": "null" }
          ]
        },
        "depth": {
          "description": "Array dimensions (0 for scalar, 1 for T[], 2 for T[][], etc.).",
          "type": "integer",
          "minimum": 0
        },
        "optional": {
          "description": "Indicates if the field is optional.",
          "type": "boolean"
        },
        "rules": {
          "description": "List of validation rules applied to this field.",
          "type": "array",
          "items": { "$ref": "#/$defs/appliedRule" }
        }
      },
      "required": ["name", "depth", "optional"],
      "additionalProperties": false
    },

    "inlineTypeDefinition": {
      "title": "Inline Type Definition",
      "description": "Defines the structure of an anonymous inline object type.",
      "type": "object",
      "properties": {
        "fields": {
          "description": "Ordered list of fields within the inline type.",
          "type": "array",
          "items": { "$ref": "#/$defs/fieldDefinition" }
        }
      },
      "required": ["fields"],
      "additionalProperties": false
    },

    "appliedRule": {
      "title": "Applied Rule",
      "description": "Represents a validation rule applied to a field, including its parameters.",
      "type": "object",
      "properties": {
        "rule": {
          "description": "Name of the validation rule being applied.",
          "type": "string",
          "pattern": "^[a-zA-Z][a-zA-Z0-9]*$"
        },
        "param": {
          "description": "The parameter value(s) passed to the rule instance (null if none).",
          "oneOf": [
            { "type": "null" },
            { "$ref": "#/$defs/appliedParam" }
          ]
        },
        "error": {
          "description": "Custom error message overriding the rule's default (optional).",
          "type": ["string", "null"]
        }
      },
      "required": ["rule"],
      "additionalProperties": false
    },

    "appliedParam": {
      "title": "Applied Parameter Value",
      "description": "Holds the actual value(s) passed to a rule instance, represented as strings for precision.",
      "type": "object",
      "properties": {
        "type": {
          "description": "The primitive type of the parameter value(s) (inferred from rule definition).",
          "$ref": "#/$defs/paramPrimitiveTypeEnum"
        },
        "isArray": {
          "description": "Indicates if the parameter was passed as an array.",
          "type": "boolean"
        },
        "value": {
          "description": "The single parameter value, represented as a string.",
          "type": "string"
        },
        "arrayValues": {
          "description": "The parameter values for an array parameter, each represented as a string.",
          "type": "array",
          "items": { "type": "string" }
        }
      },
      "required": ["type", "isArray"],
      "allOf": [
        {
          "if": {
            "properties": { "isArray": { "const": false } },
            "required": ["isArray"]
          },
          "then": {
            "required": ["value"],
            "properties": { "arrayValues": false }
          }
        },
        {
          "if": {
            "properties": { "isArray": { "const": true } },
            "required": ["isArray"]
          },
          "then": {
            "required": ["arrayValues"],
            "properties": { "value": false }
          }
        }
      ],
      "additionalProperties": false
    }
  }
}

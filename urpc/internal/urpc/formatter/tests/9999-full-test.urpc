version 1

    """ ./docs/welcome.md """ // Welcome and introduction to the API
    """ ./docs/authentication.md """ // Authentication guide


    // Type declarations

    type FirstDummyType {
      dummyField: datetime
    }
deprecated("Deprecated")
    type SecondDummyType {
      dummyField: int
    }

    type ThirdDummyType {
      dummyField: string
    }

    """
    Category represents a product category in the system.
    This type is used across the catalog module.
    """
    type Category {
      id: string
      name: string
      description?: string
      isActive: bool
      parentId?: string
    }

    """
    Product represents a sellable item in the store.
    """deprecated
    type Product {
      id: string
      name: string
      price: float
      stock: int
      category: Category
      tags?: string[]

      details: {
        dimensions: {
          width: float
          height: float
          depth?: float
        }
        weight?: float
        colors: string[]
        attributes?: {
          name: string
          value: string
        }[]
      }

      variations: {
        sku: string
        price: float
        attributes: {
          name: string
          value: string
        }[]
      }[]
    }

    // Procedure declarations

    """
    GetCategory retrieves a category by its ID.
    This is a basic read operation.
    """deprecated("Deprecated")
    proc GetCategory {
      input {
        id: string
      }
      output {
        category: Category
        exists: bool
      }
      meta {
        cache: true
        cacheTime: 300
        requiresAuth: false
        apiVersion: "1.0.0"
      }
    }

      """
    CreateProduct adds a new product to the catalog.
    This procedure handles complex validation and returns
    detailed success information.
    """
    proc CreateProduct {
      input {
        product: Product
        options?: {
          draft: bool
          notify: bool
          scheduledFor?: string
          tags?: string[]
        }

        validation: {
          skipValidation?: bool
          otherField?: {
            name: string
            severity: int 							 
            message: string
          }[]
        }
      }

      output {
        success: bool
        productId: string
        errors?: {
          code: int
          message: string
          field?: string
        }[]

        analytics: {
          duration: float
          processingSteps: {
            name: string
            duration: float
            success: bool
          }[]
          serverInfo: {
            id: string
            region: string
            load: float
          }
        }
      }

      meta {
        auth: "required"
        roles: "admin,product-manager"
        rateLimit: 100
        timeout: 30.5
        audit: true
        apiVersion: "1.2.0"
      }
    }
               """ MyStream """deprecated
    stream MyStream{
      input {
        field1: string
      }

      output {
        field1: datetime[]}
    }

// >>>>

version 1

""" ./docs/welcome.md """ // Welcome and introduction to the API
""" ./docs/authentication.md """ // Authentication guide

// Type declarations

type FirstDummyType {
  dummyField: datetime
}

deprecated("Deprecated")
type SecondDummyType {
  dummyField: int
}

type ThirdDummyType {
  dummyField: string
}

"""
    Category represents a product category in the system.
    This type is used across the catalog module.
    """
type Category {
  id: string
  name: string
  description?: string
  isActive: bool
  parentId?: string
}

"""
    Product represents a sellable item in the store.
    """
deprecated type Product {
  id: string
  name: string
  price: float
  stock: int
  category: Category
  tags?: string[]

  details: {
    dimensions: {
      width: float
      height: float
      depth?: float
    }
    weight?: float
    colors: string[]
    attributes?: {
      name: string
      value: string
    }[]
  }

  variations: {
    sku: string
    price: float
    attributes: {
      name: string
      value: string
    }[]
  }[]
}

// Procedure declarations

"""
    GetCategory retrieves a category by its ID.
    This is a basic read operation.
    """
deprecated("Deprecated")
proc GetCategory {
  input {
    id: string
  }

  output {
    category: Category
    exists: bool
  }

  meta {
    cache: true
    cacheTime: 300
    requiresAuth: false
    apiVersion: "1.0.0"
  }
}

"""
    CreateProduct adds a new product to the catalog.
    This procedure handles complex validation and returns
    detailed success information.
    """
proc CreateProduct {
  input {
    product: Product
    options?: {
      draft: bool
      notify: bool
      scheduledFor?: string
      tags?: string[]
    }

    validation: {
      skipValidation?: bool
      otherField?: {
        name: string
        severity: int
        message: string
      }[]
    }
  }

  output {
    success: bool
    productId: string
    errors?: {
      code: int
      message: string
      field?: string
    }[]

    analytics: {
      duration: float
      processingSteps: {
        name: string
        duration: float
        success: bool
      }[]
      serverInfo: {
        id: string
        region: string
        load: float
      }
    }
  }

  meta {
    auth: "required"
    roles: "admin,product-manager"
    rateLimit: 100
    timeout: 30.5
    audit: true
    apiVersion: "1.2.0"
  }
}

""" MyStream """
deprecated stream MyStream {
  input {
    field1: string
  }

  output {
    field1: datetime[]
  }
}

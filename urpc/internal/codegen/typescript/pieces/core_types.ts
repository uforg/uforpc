/** START FROM HERE **/

// Code generated by UFO RPC. DO NOT EDIT.
// If you edit this file, it will be overwritten the next time it is generated.
//
// This file is licensed under the MIT License.
// See https://github.com/uforg/uforpc for more information.
//
// Copyright (c) [Generated by UFO RPC - User retains copyright]
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

/* eslint-disable */

// -----------------------------------------------------------------------------
// Core Types
// -----------------------------------------------------------------------------

/**
 * Response represents the response of a UFO RPC call.
 *
 * @typeParam T - The concrete type of the successful response output.
 */
export type Response<T> =
  /** Successful response */
  | {
      /** Indicates whether the RPC call was successful. */
      ok: true;
      /** The successful output (only present if `ok === true`). */
      output: T;
      /** Not present when the call is successful. */
      error?: never;
    }
  /** Error response */
  | {
      /** Indicates whether the RPC call was successful. */
      ok: false;
      /** Structured error (only present if `ok === false`). */
      error: UfoError;
      /** Not present when the call fails. */
      output?: never;
    };

/**
 * Structured error type used throughout the UFO RPC ecosystem.
 *
 * It provides structured information about errors that occur within the system,
 * enabling consistent error handling across servers and clients.
 *
 * Fields:
 *   - Message: A human-readable description of the error.
 *   - Category: Optional. Categorizes the error by its nature or source (e.g., "ValidationError", "DatabaseError").
 *   - Code: Optional. A machine-readable identifier for the specific error condition (e.g., "INVALID_EMAIL").
 *   - Details: Optional. Additional information about the error.
 */
export class UfoError extends Error {
  public readonly category?: string;
  public readonly code?: string;
  public readonly details?: Record<string, unknown>;

  constructor(options: {
    /**
     * Message provides a human-readable description of the error.
     *
     * This message can be displayed to end-users or used for logging and debugging purposes.
     *
     * Use Cases:
     *   1. If localization is not implemented, Message can be directly shown to the user to inform them of the issue.
     *   2. Developers can use Message in logs to diagnose problems during development or in production.
     */
    message: string;
    /**
     * Category categorizes the error by its nature or source.
     *
     * Examples:
     *   - "ValidationError" for input validation errors.
     *   - "DatabaseError" for errors originating from database operations.
     *   - "AuthenticationError" for authentication-related issues.
     *
     * Use Cases:
     *   1. In middleware, you can use Category to determine how to handle the error.
     *      For instance, you might log "InternalError" types and return a generic message to the client.
     *   2. Clients can inspect the Category to decide whether to prompt the user for action,
     *      such as re-authentication if the Category is "AuthenticationError".
     */
    category?: string;
    /**
     * Code is a machine-readable identifier for the specific error condition.
     *
     * Examples:
     *   - "INVALID_EMAIL" when an email address fails validation.
     *   - "USER_NOT_FOUND" when a requested user does not exist.
     *   - "RATE_LIMIT_EXCEEDED" when a client has made too many requests.
     *
     * Use Cases:
     *   1. Clients can map Codes to localized error messages for internationalization (i18n),
     *      displaying appropriate messages based on the user's language settings.
     *   2. Clients or middleware can implement specific logic based on the Code,
     *      such as retry mechanisms for "TEMPORARY_FAILURE" or showing captcha for "RATE_LIMIT_EXCEEDED".
     */
    code?: string;
    /**
     * Details contains optional additional information about the error.
     *
     * This field can include any relevant data that provides more context about the error.
     * The contents should be serializable to JSON.
     *
     * Use Cases:
     *   1. Providing field-level validation errors, e.g., Details could be:
     *      {"fields": {"email": "Email is invalid", "password": "Password is too short"}}
     *   2. Including diagnostic information such as timestamps, request IDs, or stack traces
     *      (ensure sensitive information is not exposed to clients).
     */
    details?: Record<string, unknown>;
  }) {
    super(options.message);
    this.name = "UfoError"; // Easier stack-trace filtering.
    this.category = options.category;
    this.code = options.code;
    this.details = options.details;
    Object.setPrototypeOf(this, new.target.prototype); // Maintains proper prototype chain when targeting ES5.
  }

  /** Serialises the error including all optional fields. */
  toJSON(): Record<string, unknown> {
    return {
      message: this.message,
      ...(this.category ? { category: this.category } : {}),
      ...(this.code ? { code: this.code } : {}),
      ...(this.details ? { details: this.details } : {}),
    };
  }
}

/**
 * Normalises arbitrary error inputs into a `UfoError` instance.
 */
function asError(err: unknown): UfoError {
  if (err instanceof UfoError) {
    return err;
  }

  if (err instanceof Error) {
    return new UfoError({ message: err.message });
  }

  // Fallback for non-error values.
  return new UfoError({ message: String(err) });
}

/**
 * Convenience helper for missing-field validation errors.
 */
function errorMissingRequiredField(message: string): UfoError {
  return new UfoError({
    message,
    category: "ValidationError",
    code: "MISSING_REQUIRED_FIELD",
  });
}

/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface Schema {
  /**
   * The version number of the URPC schema specification used.
   */
  version: 1;
  /**
   * An ordered array of all declared elements (nodes) in the URPC schema.
   */
  nodes: (DocumentationNode | TypeDefinitionNode | ProcedureDefinitionNode | StreamDefinitionNode)[];
}
/**
 * Represents a standalone documentation block.
 */
export interface DocumentationNode {
  /**
   * Node type identifier.
   */
  kind: "doc";
  /**
   * The documentation content (Markdown or resolved external file).
   */
  content: string;
}
/**
 * Defines a custom data type.
 */
export interface TypeDefinitionNode {
  /**
   * Node type identifier.
   */
  kind: "type";
  /**
   * Name of the custom type.
   */
  name: string;
  /**
   * Associated documentation string (optional).
   */
  doc?: string;
  /**
   * Indicates if the type is deprecated and contains the message associated with the deprecation. Use an empty string to deprecate without a message.
   */
  deprecated?: string;
  /**
   * Ordered list of fields within the type.
   */
  fields?: FieldDefinition[];
}
/**
 * Defines a field within a type or procedure input/output.
 */
export interface FieldDefinition {
  /**
   * Name of the field.
   */
  name: string;
  /**
   * Associated documentation string (optional).
   */
  doc?: string;
  /**
   * Name of the primitive or custom type (used if the type is not inline).
   */
  typeName?: string;
  typeInline?: InlineTypeDefinition;
  /**
   * Indicates if the field is an array.
   */
  isArray: boolean;
  /**
   * Indicates if the field is optional.
   */
  optional: boolean;
}
/**
 * Definition of the inline object type (used if the type is not named).
 */
export interface InlineTypeDefinition {
  /**
   * Ordered list of fields within the inline type.
   */
  fields: FieldDefinition[];
}
/**
 * Defines an RPC procedure.
 */
export interface ProcedureDefinitionNode {
  /**
   * Node type identifier.
   */
  kind: "proc";
  /**
   * Name of the procedure.
   */
  name: string;
  /**
   * Associated documentation string (optional).
   */
  doc?: string;
  /**
   * Indicates if the procedure is deprecated and contains the message associated with the deprecation. Use an empty string to deprecate without a message.
   */
  deprecated?: string;
  /**
   * Ordered list of input fields for the procedure.
   */
  input?: FieldDefinition[];
  /**
   * Ordered list of output fields for the procedure.
   */
  output?: FieldDefinition[];
}
/**
 * Defines an RPC stream.
 */
export interface StreamDefinitionNode {
  /**
   * Node type identifier.
   */
  kind: "stream";
  /**
   * Name of the stream.
   */
  name: string;
  /**
   * Associated documentation string (optional).
   */
  doc?: string;
  /**
   * Indicates if the procedure is deprecated and contains the message associated with the deprecation. Use an empty string to deprecate without a message.
   */
  deprecated?: string;
  /**
   * Ordered list of input fields for the stream.
   */
  input?: FieldDefinition[];
  /**
   * Ordered list of output fields for the stream.
   */
  output?: FieldDefinition[];
}
